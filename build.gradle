import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.task.NodeTask
import com.moowork.gradle.node.task.NpmTask
import com.moowork.gradle.node.variant.VariantBuilder

plugins {
    id "com.moowork.node" version "0.13"
    id "de.richsource.gradle.plugins.typescript" version "1.8.0"
}

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

// nodejs related settings

node {
    version = '5.12.0'
    npmVersion = '3.10.5'
    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    // Set the work directory for unpacking node
    // workaround: https://github.com/srs/gradle-node-plugin/issues/91
    workDir = file("${projectDir}/.gradle/nodejs")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

String nodeExecutable() {
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

// typescript related settings

compileTypeScript {
    projectFile = file("$projectDir/tsconfig.json")
    outputDir = null  // <- huh? some magical default. can`t figure out where the value is set to non null...?
    compilerExecutable "${nodeExecutable()} node_modules/typescript/lib/tsc.js"
    dependsOn "npmInstall"

    // make "UP-TO-DATE" checks work... the paths are duplicated with tsconfig.json :(
    inputs.dir(file("$projectDir/src/main/ts"))
    inputs.dir(file("$projectDir/src/test/ts"))
    outputs.dir(file("$projectDir/build/generated-source/main/ts/"))
    outputs.dir(file("$projectDir/build/generated-source/test/ts/"))
}

tasks.getByName("compileTypeScript").group = 'typescript'

// karma related settings

def karmaDebug = true;
def npmBaseDirName = 'node_modules'
def karmaBin = project.file("$npmBaseDirName/karma/bin/karma")

project.task('karmaDependencies', type: NpmTask, group: 'Karma', description: 'Installs dependencies needed for running karma tests.') {
    args = ['install']
    if (!karmaDebug) {
        args += ['--silent']
    }
    outputs.dir project.file(npmBaseDirName)
}

project.task('karmaRun', type: NodeTask, dependsOn: ['karmaDependencies'], group: 'Karma',
         description: 'Executes karma tests') {
    script = karmaBin
    args = ['start', "$projectDir/karma.conf.js", '--single-run']
}

task clean(type: Delete) {
  delete project.buildDir
}